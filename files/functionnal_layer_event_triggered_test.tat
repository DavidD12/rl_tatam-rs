enum SkillsetState = { Free, Lock }
enum SkillState = { Idle, Running, Interrupting, InvariantFailure, Success, Failure, Interrupted}
// ==================== Resouces ====================

enum CustomRobot_Motion = { CustomRobot_On, CustomRobot_Off }
var custom_robot_motion: CustomRobot_Motion

enum CustomRobot_Battery = { CustomRobot_Normal, CustomRobot_Critical }
var custom_robot_battery: CustomRobot_Battery

var battery_value: Int
var custom_robot_battery_to_critical_request: Bool
var custom_robot_battery_to_normal_request: Bool

init init_custom_robot_resources {
  custom_robot_motion = CustomRobot_Off and custom_robot_battery = CustomRobot_Normal
  and battery_value = 100 and custom_robot_battery_to_normal_request = false
  and custom_robot_battery_to_critical_request = false
}

// ==================== Events ====================

trans custom_robot_battery_to_critical {
	custom_robot_state = Free and (custom_robot_battery = CustomRobot_Normal)
	and custom_robot_battery_to_critical_request = true
	and |custom_robot_state, custom_robot_battery, custom_robot_battery_to_critical_request|(
		custom_robot_state' = Lock
		and custom_robot_battery_to_critical_request' = false
		and custom_robot_battery' = CustomRobot_Critical
	)
}
trans custom_robot_battery_to_normal {
	custom_robot_state = Free and (custom_robot_battery = CustomRobot_Critical)
	and custom_robot_battery_to_normal_request = true
	and |custom_robot_state, custom_robot_battery, custom_robot_battery_to_normal_request|(
		custom_robot_state' = Lock
		and custom_robot_battery_to_normal_request' = false
		and custom_robot_battery' = CustomRobot_Normal
	)
}

// ==================== Callback ====================

trans critical_battery_callback {
	battery_value <= 10 and custom_robot_battery != CustomRobot_Critical
	and custom_robot_battery_to_critical_request != true
	and |custom_robot_battery_to_critical_request|(
		custom_robot_battery_to_critical_request' = true
	)
}
trans normal_battery_callback {
	battery_value > 10 and custom_robot_battery != CustomRobot_Normal
	and custom_robot_battery_to_normal_request != true
	and |custom_robot_battery_to_normal_request|(
		custom_robot_battery_to_normal_request' = true
	)
}

// ==================== Skillset ====================
var custom_robot_state: SkillsetState

init init_custom_robot {
	custom_robot_state = Free
}

trans custom_robot_invariants_propagation {
	custom_robot_state = Lock and
	if custom_robot_goto_state = Running and not (custom_robot_motion = CustomRobot_On) then
		|custom_robot_goto_state, battery_value|(
			custom_robot_goto_state' = InvariantFailure
			and battery_value' = battery_value - 30
		)
	elif custom_robot_goto_state = Running and not (custom_robot_battery = CustomRobot_Normal) then
		|custom_robot_goto_state, custom_robot_motion, battery_value|(
			custom_robot_goto_state' = InvariantFailure
			and custom_robot_motion' = CustomRobot_Off
			and battery_value' = battery_value - 30
		)
	elif custom_robot_recharge_state = Running and not (custom_robot_motion = CustomRobot_Off) then
		|custom_robot_recharge_state|(
			custom_robot_recharge_state' = InvariantFailure
		)
	else
		|custom_robot_state, custom_robot_goto_state, custom_robot_recharge_state|(
			if custom_robot_goto_state = InvariantFailure or custom_robot_goto_state = Success or custom_robot_goto_state = Failure or custom_robot_goto_state = Interrupted then
				custom_robot_goto_state' = Idle
			else
				custom_robot_goto_state' = custom_robot_goto_state
			end and
			if custom_robot_recharge_state = InvariantFailure or custom_robot_recharge_state = Success or custom_robot_recharge_state = Failure or custom_robot_recharge_state = Interrupted then
				custom_robot_recharge_state' = Idle
			else
				custom_robot_recharge_state' = custom_robot_recharge_state
			end and
			custom_robot_state' = Free
		)
	end
}

// ==================== Skill ====================

// -------------------- Skill goto --------------------

var custom_robot_goto_state: SkillState

init custom_robot_goto {
	custom_robot_goto_state = Idle
}
trans custom_robot_goto_idle_to_running {
	custom_robot_state = Free and custom_robot_goto_state = Idle
	and (custom_robot_motion = CustomRobot_Off)
	and (custom_robot_battery = CustomRobot_Normal)
	and |custom_robot_state, custom_robot_goto_state, custom_robot_motion|(
		custom_robot_state' = Lock and custom_robot_goto_state' = Running
		and custom_robot_motion' = CustomRobot_On
	)
}
trans custom_robot_goto_running_to_success_arrived {
	custom_robot_state = Free and custom_robot_goto_state = Running
	and |custom_robot_state, custom_robot_goto_state, custom_robot_motion, battery_value|(
		custom_robot_state' = Lock and custom_robot_goto_state' = Success
		and custom_robot_motion' = CustomRobot_Off
		and battery_value' = battery_value - 30
	)
}
trans custom_robot_goto_running_to_failure_blocked {
	custom_robot_state = Free and custom_robot_goto_state = Running
	and |custom_robot_state, custom_robot_goto_state, custom_robot_motion, battery_value|(
		custom_robot_state' = Lock and custom_robot_goto_state' = Failure
		and custom_robot_motion' = CustomRobot_Off
		and battery_value' = battery_value - 30
	)
}
trans custom_robot_goto_running_to_interrupting {
	custom_robot_state = Free and custom_robot_goto_state = Running
	and |custom_robot_goto_state|(custom_robot_goto_state' = Interrupting)
}
trans custom_robot_goto_interrupting_to_interrupted {
	custom_robot_state = Free and custom_robot_goto_state = Interrupting
	and |custom_robot_state, custom_robot_goto_state, custom_robot_motion, battery_value|(
		custom_robot_state' = Lock and custom_robot_goto_state' = Interrupted
		and custom_robot_motion' = CustomRobot_Off
		and battery_value' = battery_value - 30
	)
}

// -------------------- Skill recharge --------------------

var custom_robot_recharge_state: SkillState

init custom_robot_recharge {
	custom_robot_recharge_state = Idle
}
trans custom_robot_recharge_idle_to_running {
	custom_robot_state = Free and custom_robot_recharge_state = Idle
	and (custom_robot_battery != CustomRobot_Normal)
	and (custom_robot_motion = CustomRobot_Off)
	and |custom_robot_state, custom_robot_recharge_state|(
		custom_robot_state' = Lock and custom_robot_recharge_state' = Running
	)
}
trans custom_robot_recharge_running_to_success_charged {
	custom_robot_state = Free and custom_robot_recharge_state = Running
	and |custom_robot_state, custom_robot_recharge_state, custom_robot_battery, battery_value|(
		custom_robot_state' = Lock and custom_robot_recharge_state' = Success
		and (custom_robot_battery' = CustomRobot_Normal)
		and battery_value' = 100
	)
}
trans custom_robot_recharge_running_to_failure_emergency {
	custom_robot_state = Free and custom_robot_recharge_state = Running
	and |custom_robot_state, custom_robot_recharge_state, custom_robot_battery|(
		custom_robot_state' = Lock and custom_robot_recharge_state' = Failure
		and (custom_robot_battery' != CustomRobot_Normal)
	)
}
trans custom_robot_recharge_running_to_interrupting {
	custom_robot_state = Free and custom_robot_recharge_state = Running
	and |custom_robot_recharge_state|(custom_robot_recharge_state' = Interrupting)
}
trans custom_robot_recharge_interrupting_to_interrupted {
	custom_robot_state = Free and custom_robot_recharge_state = Interrupting
	and |custom_robot_state, custom_robot_recharge_state|(
		custom_robot_state' = Lock and custom_robot_recharge_state' = Interrupted
	)
}





// on peut lancer goto infiniment souvent sans lancer recharge infiniment souvent
// prop = G(F(custom_robot_goto_state = Running)) and F(G(custom_robot_recharge_state != Running))
// contre exemple sans spec : Solve : SAT
// prop = ((not( F(G(custom_robot_recharge_state != Running)) and G(F(custom_robot_goto_state = Running)) )) and (not(F(G(custom_robot_goto_state = Running))) and not(F(G(custom_robot_recharge_state = Running))))) and  (G(F(custom_robot_goto_state = Running)) and F(G(custom_robot_recharge_state != Running)))
// contre exemple avec spec : Solve : UNSAT k = 6
// prop = (G(F(custom_robot_goto_state = Running))) implies F(custom_robot_battery = CustomRobot_Critical)
// variante de la spec de déchargelent : Solve : UNSAT k = 6
// notes : c'est unsat car goto ne change pas l'état de la resource batterie
// prop = (G(F(custom_robot_goto_state = Running)) and F(G(custom_robot_recharge_state != Running))) and (((G(F(custom_robot_goto_state = Running))) implies F(custom_robot_battery = CustomRobot_Critical)) and (not(F(G(custom_robot_goto_state = Running))) and not(F(G(custom_robot_recharge_state = Running)))))
// contre exemple avec variante de la spec : Solve : UNSAT k = 6
// notes : c'est unsat car goto ne change pas l'état de la resource batterie

// un skill peut ne jamais terminer
// prop = ( F(G(custom_robot_goto_state = Running)) ) or ( F(G(custom_robot_recharge_state = Running)) )
// contre exemple sans spec : Solve : UNSAT k = 5
// prop = ((not( F(G(custom_robot_recharge_state != Running)) and G(F(custom_robot_goto_state = Running)) )) and (not(F(G(custom_robot_goto_state = Running))) and not(F(G(custom_robot_recharge_state = Running))))) and ( F(G(custom_robot_goto_state = Running)) ) or ( F(G(custom_robot_recharge_state = Running)) )
// contre exemple avec spec : Solve : UNSAT k = 6
// prop = (( F(G(custom_robot_goto_state = Running)) ) or ( F(G(custom_robot_recharge_state = Running)) )) and (((G(F(custom_robot_goto_state = Running))) implies F(custom_robot_battery = CustomRobot_Critical)) and (not(F(G(custom_robot_goto_state = Running))) and not(F(G(custom_robot_recharge_state = Running)))))
// contre exemple avec variante de la spec : Solve : UNSAT k = 6
// notes : c'est unsat car goto ne change pas l'état de la resource batterie




// TO TRY AFTER BUG CORRECTION OF X OPERATOR

// hypothèse de fonctionnement :
// 		- piste 1, utilliser opérateur X : l'exemple de plusieurs event qui doivent être déclenchés montre qu'il en faudrait un nbr arbitrairement grand du style XX OR (XX)² ...
// 		- piste 2, donc utiliser opérateur F : l'exemple de goto qui s'exécuterais autant de fois que voulu entre la callback qui demande changement de la batterie et l'event qui se lance montre que F n'est pas suffisant
// 		- piste 3, on veut exprimer que l'event se lance au plus tôt dès que possible dès qu'il reçois la requête : on voudrais forcer la prise de la transition de l'event dès que possible, mais on va se passer du concept de transition urgente
// 			-> solution : on restreint les transitions du système (sauf celles concernant les vérifict° d'invariants) à ne pas être prises si une requête d'event est vraie/demandée

// Question, est-ce que tatam cherche à faire toutes les transitions possibles en // ?
// 		- ça m'arrangerais pour être sur que les callback se lancent dès que possible

// prop = (battery_value <= 10) implies (X(custom_robot_battery = CustomRobot_Critical))
// prop = ((battery_value <= 10) implies (X(X(custom_robot_battery = CustomRobot_Critical)))) and ((battery_value > 10) implies (X(X(custom_robot_battery = CustomRobot_Normal)))) and (F(custom_robot_battery = CustomRobot_Critical))
// prop = F(custom_robot_battery = CustomRobot_Critical)

search infinite + complete solve